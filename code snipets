Call(), Apply() and Bind()
-------------------------------------
let name = {
  firstName: 'Avinash',
  lastName: 'Urala',
  printFullName: function(place, state) {
    console.log(this.firstName +' '+ this.lastName + ' from '+ place +','+ state);
  }
}

let name2 = {
  firstName: 'Sachin',
  lastName: 'Tendulakar'
}

name.printFullName.call(name2, 'Mumbai', 'Maharashtra')

// With Call you can write methods which can be used on different onjects

// Apply is similar to call, only difference between call() ans apply() is the 
// way we pass the arguments
// In apply we pass arguments in array list


name.printFullName.apply(name2, ['Mumbai', 'Maharashtra'])

// bind() - same as call(), but instead of directly calling the method it returns copy of that
// method with passed object

let printName = name.printFullName.bind(name2, 'Mumbai', 'Maharashtra');

printName();


===========================
REST & SPREAD
====================================
// Rest and Spread Operator

/* Whenever you use (...) with function to deal with any number of parameters, then you call it 
 * Rest operator
 */

function sum(...nums) {
  console.log(nums);
}

sum(4, 5);
sum(4, 5, 6, 7);

// rest (...) converts arguments into an array

function sum1() {
  console.log(arguments);
}

// sum2(4, 5);
// sum2(4, 5, 6, 7);

// arguments object does not work with arrow functions

const sum2 = () => {
  console.log(arguments);
}

/* As the rest operator puts the separate data values in one array, 
   the spread does exacly opposite
   It spreads the array into separate values */

let arr1 = [1, 2, 3, 4, 5]
let arr2 = [...arr1, 6, 7, 8]

console.log(arr2)

/* Find max value in an array */

console.log(Math.max(...arr2))


                   
                   
